contract Emin =

    record state = { 
        currentQuestionID: int,
        testvalue: int,
        questions: map(int, question),
        right_answer: map(int, string),
        participants: list(address),
        game_started: bool,
        game_stopped: bool
        }

    record question = {
        text: string,
        id: int,
        answers: list(string)
        }

    stateful entrypoint init() = {
        testvalue = 42,
        currentQuestionID = 1,
        participants = [],
        game_started = false,
        game_stopped = false,
        questions = 
        {
            [1] = {
                id = 1,
                text =  "What is the capital of Uruguay",
                answers = ["Montevideo", "Vaduz", "Berlin"]
            }
        },
        right_answer = { [1] = "Montevideo" }
        }

    stateful entrypoint make_answer(q_id:int, answer:string) : option(question) =
        require(state.game_stopped == false, "Sorry, game over")
        require(state.game_started == true, "Sorry, game has not started")
        if(!is_this_the_right_answer(q_id, answer))
            let the_better_players = delete_from_partipants(Call.caller, state.participants)
            put(state{participants = the_better_players})
            None
        else
            if(Map.size(state.questions) == q_id)
                put(state{game_stopped = true})
                Some(state.questions[q_id])
            else
                Some(state.questions[q_id+1])
            
    
    function delete_from_partipants(participant:address, participants: list(address)) : list(address) =
        switch (participants)
            [] => []
            first_element :: rest_participants =>
                if(first_element == participant)
                    rest_participants
                else
                    delete_from_partipants(participant, rest_participants)

    
    public entrypoint is_this_the_right_answer(id: int,answer: string) : bool =
        state.right_answer[id] == answer

    stateful entrypoint add_question(question: string, right: string, all: list(string)) =
        require(Call.caller == Contract.creator, "You are not the Boss.")
        let next_id = state.currentQuestionID + 1
        put(state{
            currentQuestionID = next_id,
            questions[next_id] = {text = question, id = next_id, answers = all},
            right_answer[next_id] = right 
            })
    
    stateful entrypoint register() : bool =
        require(state.game_started == false, "Game already started")
        require(Call.value == 1000000000000000000, "Not enough tokens")
        if (check_if_registered(state.participants) == false)
            put(state{participants = Call.caller :: state.participants})
            true
        else
            false

    function check_if_registered(participants: list(address)) : bool =
        switch (participants)
            [] => false
            element :: rest_of_list => 
                if (element == Call.caller)
                    true
                else
                    check_if_registered(rest_of_list)

    stateful entrypoint start_game() = 
        put(state{game_started = true})

    public entrypoint get_question(id: int) : question =
        state.questions[id] 
    
    public entrypoint read_test_value() : int =
        state.testvalue
    
    public entrypoint get_owner() : address =
        Contract.creator
    
    public entrypoint return_caller() : address =
        Call.caller

    public stateful entrypoint add_test_value(new_testvalue: int) : int =
        put(state{testvalue = new_testvalue}) 
        new_testvalue